package JUnitTests;

import java.io.File;
import java.util.ArrayList;

import org.junit.Assert;
import org.junit.Test;

import AI.HillClimber;
import TradingFloor.Stock;
import TradingFloor.Trader;

public class TestCorrestNumberOfNeighbours {

	/* Testing that the correct number of neighbours
	 * have been generated for a given trader.
	 * 
	 * */
	@Test
	public void testCorrectNumberNeighboursGenerated() {
	
		File aglFile = new File(Stock.class.getResource("/TestPackage/agl.csv").getFile());
		File ALSI40file = new File(Stock.class.getResource("/TestPackage/ALSI40.csv").getFile());
		File bilfile = new File(Stock.class.getResource("/TestPackage/bil.csv").getFile());
		File gfifile = new File(Stock.class.getResource("/TestPackage/gfi.csv").getFile());
		
		Stock agl = new Stock("agl", aglFile);
		Stock ALSI40 = new Stock("ALSI40",ALSI40file);
		Stock bil = new Stock("bil",bilfile);
		Stock gfi = new Stock("gfi",gfifile);
		
		Stock[] stks = {agl, ALSI40, bil, gfi};
		Trader curTrader = new Trader("firstTrader",100000, stks);
		HillClimber hc = new HillClimber(curTrader);
		curTrader = hc.search(curTrader);
		
		Assert.assertEquals(64, curTrader.generateNeighbours().size());
	}
	
	/* Testing that the first neighbour of an initial trader
	 * with strategy of all holds will be generated correctly.
	 * */
	@Test
	public void testCorrectSingleNeighbourGenerated() {
		
		File aglFile = new File(Stock.class.getResource("/TestPackage/agl.csv").getFile());
		
		Stock agl = new Stock("agl", aglFile);
		
		Stock[] stks = {agl};
		
		Trader curTrader = new Trader("firstTrader",100000, stks);
		curTrader.setStrategy("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH");
		curTrader.setMasterTableData();
		ArrayList<Trader> neighbours = curTrader.generateNeighbours();
		Boolean foundNeighbour = false;
		
		for(Trader tr: neighbours){
			//System.out.println("strategy is " + tr.getStrategy().values());
			if(tr.getStrategy().values().toString().equals("[S, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H]")){
				foundNeighbour = true;
			}
		}
		
		Assert.assertEquals(true,foundNeighbour);
	}
	
	/* Tests that all the correct/anticipated neighbours have been
	 * generated by testing a change of character at a predetermined index
	 * and that characters in all other indices have remained the same as
	 * the original decision strategy.
	 * 
	 * */
	 @Test
	public void testAllCorrectNeighboursGenerated() {
		File aglFile = new File(Stock.class.getResource("/TestPackage/agl.csv").getFile());
			
		Stock agl = new Stock("agl", aglFile);
			
		Stock[] stks = {agl};
		 
		Trader curTrader = new Trader("firstTrader",100000, stks);
		curTrader.setStrategy("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH");
		curTrader.setMasterTableData();
		ArrayList<Trader> neighbours = curTrader.generateNeighbours();
		int totalDifferences = 0;
		int changedIndex = 0;
		int countTrader = 0;
		
		for(Trader tr: neighbours){
			countTrader++;
			//System.out.println("tr strategy is " + tr.trimString(tr.getStrategy().values().toString()));
			//System.out.println(tr.trimString(curTrader.getStrategy().values().toString()));
			if(tr.compareStrings(tr.trimString(tr.getStrategy().values().toString()), tr.trimString(curTrader.getStrategy().values().toString()), changedIndex)){
				//System.out.println("Got in here");
				totalDifferences++;
				if(countTrader % 2 == 0){
					changedIndex++;
				}
			}
		}
		
		Assert.assertEquals(64,totalDifferences);
	}
	
	

}
